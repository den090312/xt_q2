@{
    var guest    = Role.Create("Guest");
    var roleUser = Role.Create("User");
    var admin    = Role.Create("Admin");

    var currentUser = Webuser.Current;
    var root = Server.MapPath("~");

    var AllUserOperationsHtml  = @"\html\AllUserOperations.html";
    var AllAwardOperationsHtml = @"\html\AllAwardOperations.html";
    var UserPrintHtml          = @"\html\UserPrint.html";
    var JoinOperationsHtml     = @"\html\JoinOperations.html";

    var message = string.Empty;
    var htmlRaw = string.Empty;

    var userImages  = HttpContext.Current.Request.Files;
    var awardImages = HttpContext.Current.Request.Files;

    if (IsPost)
    {
        UserCreation();
        UserAwardsDeleted();
        AwardCreation();
        AwardUsersDeleted();
        JoinAwardToUser();
        EditUsers();
        EditAwards();
        SaveUserImage();
        SaveAwardImage();
        Account();

        //POST-reload page fix
        @Html.Raw("<script>document.location='https://localhost:44337/index.cshtml'</script>");
    }

    void Account()
    {
        var loggedOut = Request.Form["loggedOut"];
        var logName   = Request.Form["logName"];
        var logPass   = Request.Form["logPass"];
        var regName   = Request.Form["regName"];
        var regPass   = Request.Form["regPass"];
        var roleName  = Request.Form["roleName"];

        if (logName != null & logPass != null)
        {
            if (!Webuser.NameExists(logName))
            {
                Response.Write("<script>alert('User name is not exists!');</script>");

            }
            else if (!Webuser.PasswordIsOk(logName, logPass))
            {
                Response.Write("<script>alert('Wrong password!');</script>");
            }
            else
            {
                LogIn(logName, logPass);
            }
        }

        if (loggedOut != null & loggedOut == "loggedOut")
        {
            Webuser.LogOut();
        }

        if (regName != null & regPass != null & roleName != null)
        {
            if (TryUserRegister(regName, regPass, roleName))
            {
                LogIn(regName, regPass);
            }
            else
            {
                Webuser.LogOut();
            }
        }
    }

    void LogIn(string logName, string logPass) => Webuser.LogIn(logName, logPass);

    bool TryUserRegister(string regName, string regPass, string roleName)
    {
        if (regName == string.Empty || regPass == string.Empty || roleName == string.Empty)
        {
            return false;
        }

        if (Webuser.NameExists(regName))
        {
            message = "User name already exists";

            Response.Write("<script>alert('User name already exists!');</script>");

            return false;
        }

        var user = Webuser.Create(regName, Role.Create(roleName), regPass);

        return Webuser.Register(user);
    }

    void UserCreation()
    {
        var userName = Request.Form["userName"];
        var dateOfBirth = Request.Form["dateOfBirth"];

        if (userName != null & dateOfBirth != null)
        {
            if (Crud.UserCreated(userName, dateOfBirth))
            {
                message = "User created";
            }
            else
            {
                message = "User NOT created";
            }
        }
    }

    void UserAwardsDeleted()
    {
        var userGuid = Request.Form["userGuid"];

        if (userGuid != null)
        {
            if (Crud.UserAwardsDeleted(userGuid))
            {
                message = "User with awards deleted";
            }
            else
            {
                message = "User with awards NOT deleted";
            }
        }
    }

    void AwardCreation()
    {
        var awardTitle = Request.Form["awardTitle"];

        if (awardTitle != null)
        {
            if (Crud.AwardCreated(awardTitle))
            {
                message = "Award created";
            }
            else
            {
                message = "Award NOT created";
            }
        }
    }

    void AwardUsersDeleted()
    {
        var awardGuid = Request.Form["awardGuid"];

        if (awardGuid != null & awardGuid != "")
        {
            if (Crud.AwardUsersDeleted(awardGuid))
            {
                message = "Award with users deleted";
            }
            else
            {
                message = "Award with users NOT deleted";
            }
        }
    }

    void JoinAwardToUser()
    {
        var userGuid = Request.Form["userGuidJoin"];
        var awardGuid = Request.Form["awardGuidJoin"];

        if (userGuid != null & awardGuid != null)
        {
            if (Crud.JoinedAwardToUser(userGuid, awardGuid))
            {
                message = "Award joined to user";
            }
            else
            {
                message = "Award was NOT joined to user";
            }
        }
    }

    void EditUsers()
    {
        var guids = Request.Form.GetValues("userGuids");
        var names = Request.Form.GetValues("userNames");
        var dates = Request.Form.GetValues("userDates");

        if (guids != null & names != null & dates != null)
        {
            if (Crud.UsersEdited(guids, names, dates))
            {
                message = "Users edited";
            }
            else
            {
                message = "Users was NOT edited";
            }
        }
    }

    void EditAwards()
    {
        var guids = Request.Form.GetValues("awardGuids");
        var titles = Request.Form.GetValues("awardTitles");

        if (guids != null & titles != null)
        {
            if (Crud.AwardsEdited(guids, titles))
            {
                message = "Awards edited";
            }
            else
            {
                message = "Awards was NOT edited";
            }
        }
    }

    void SaveUserImage()
    {
        if (!Images.TryGetImage(userImages, out var userImageFile, out var userImageFileName))
        {
            return;
        }

        var userImageGuid = Request.Form["userImageGuid"];

        if (userImageGuid != null)
        {
            var userImagePath = Server.MapPath(userImageFileName);

            if (Images.ImageSaved(userImagePath, root, userImageFile, userImageGuid))
            {
                message = "User image saved";
            }
            else
            {
                message = "User image was NOT saved";
            }
        }
    }

    void SaveAwardImage()
    {
        if (!Images.TryGetImage(awardImages, out var awardImageFile, out var awardImageFileName))
        {
            return;
        }

        var awardImageGuid = Request.Form["awardImageGuid"];

        if (awardImageGuid != null)
        {
            var awardImagePath = Server.MapPath(awardImageFileName);

            if (Images.ImageSaved(awardImagePath, root, awardImageFile, awardImageGuid))
            {
                message = "Award image saved";
            }
            else
            {
                message = "Award image was NOT saved";
            }
        }
    }
}

@using Common;
@using WEB_UI;

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <script src="script.js"></script>
    <link rel="stylesheet" href="styles.css" type="text/css" />
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <title>UserAwards</title>
</head>
<body>
    <div id="main" class="main">
        <b>@message</b>
        <p class="currentUserName">User name: @(currentUser.Name)</p>
        <p class="currentUserRole">Role: @(currentUser.Role.Name)</p>
        @{
            if (currentUser.Role == guest)
            {
                <div class="authentication">
                    <form method="post" action="" class="user_log_in">
                        <p class="alertbox"></p>
                        <input type="text" class="log_name" name="logName" placeholder="Name" />
                        <input type="text" class="log_pass" name="logPass" placeholder="Password" />
                        <input type="submit" class="log_in" value="Log in">
                    </form>
                    <p>
                        <input type="button" class="goToRegistration" value="Register" />
                    </p>
                </div>
                <form method="post" action="" class="user_register" style="display: none;">
                    <p class="alertbox"></p>
                    <h4>Registration</h4>
                    <p>
                        <input type="text" class="reg_name" name="regName" placeholder="Name" />
                    </p>
                    <p>
                        <input type="text" class="reg_pass" name="regPass" placeholder="Password" />
                    </p>
                    Role:
                    @{
                        var roleList = Role.List;

                        foreach (var role in roleList)
                        {
                            <label><input type="radio" name="roleName" value="@(role.Name)" checked />@(role.Name)</label>
                        }
                    }
                    <p>
                        <input type="submit" class="register" value="Ок" />
                        <input type="submit" class="cancel_register" value="Cancel" />
                    </p>
                </form>
            }
            else
            {
                <form method="post" action="" class="user_log_out">
                    <input type="submit" class="log_out" value="Log out" />
                    <input type="text" class="log_out_post" style="display: none;" name="loggedOut" />
                </form>
            }

            if (currentUser.Role == admin)
            {
                htmlRaw = File.ReadAllText(root + AllUserOperationsHtml);
            }

            if (currentUser.Role == guest || currentUser.Role == roleUser)
            {
                htmlRaw = File.ReadAllText(root + UserPrintHtml);
            }

            @Html.Raw(htmlRaw);

            htmlRaw = string.Empty;

            if (currentUser.Role == admin)
            {
                htmlRaw = File.ReadAllText(root + AllAwardOperationsHtml);
            }

            @Html.Raw(htmlRaw);

            htmlRaw = string.Empty;

            if (currentUser.Role == admin)
            {
                htmlRaw = File.ReadAllText(root + JoinOperationsHtml);
            }

            @Html.Raw(htmlRaw);
        }
    </div>
    <div class="operations">
        <form method="post" action="" class="user_creation" style="display: none">
            <h4>User creation</h4>
            <p class="alertbox"></p>
            <p>Name: <input type="text" id="userName" class="name" name="userName"></p>
            <p>Date of birth: <input type="date" id="dateOfBirth" class="dateOfBirth" name="dateOfBirth"></p>
            <input type="submit" class="user_create" value="Create" />
            <input type="button" class="cancel" value="Cancel" />
        </form>
        <form method="post" action="" class="award_creation" style="display: none">
            <h4>Award creation</h4>
            <p class="alertbox"></p>
            <p>Title: <input type="text" id="awardTitle" class="title" name="awardTitle"></p>
            <input type="submit" class="award_create" value="Create" />
            <input type="button" class="cancel" value="Cancel" />
        </form>
        @{
            if (currentUser.Role == admin)
            {
                <form method="post" action="" class="user_del" style="display: none;">
                    <h4>Choose user to delete:</h4>
                    <p>
                        <select class="user_chosen">
                            @{
                                var allUsers = DependencyResolver.UserLogic?.GetAll();

                                foreach (var user in allUsers)
                                {
                                    <option selected>@(user.Name + " " + user.DateOfBirth.ToString(Entities.User.DateFormat))</option>
                                }
                            }
                        </select>
                        <select class="user_chosen_guid" style="display: none;">
                            @{
                                foreach (var user in allUsers)
                                {
                                    <option selected>@user.UserGuid.ToString()</option>
                                }
                            }
                        </select>
                    </p>
                    <input type="text" class="user_guid" style="display: none;" name="userGuid" />
                    <input type="submit" class="user_delete" value="Delete" />
                    <input type="button" class="cancel" value="Cancel" />
                </form>
                <form method="post" action="" class="award_del" style="display: none;">
                    <h4>Choose award to delete:</h4>
                    <p>
                        <select class="award_chosen">
                            @{
                                var allAwards = DependencyResolver.AwardLogic?.GetAll();

                                foreach (var award in allAwards)
                                {
                                    <option selected>@award.Title</option>
                                }
                            }
                        </select>
                        <select class="award_chosen_guid" style="display: none;">
                            @{
                                foreach (var award in allAwards)
                                {
                                    <option selected>@award.AwardGuid.ToString()</option>
                                }
                            }
                        </select>
                    </p>
                    <input type="text" class="award_guid" style="display: none;" name="awardGuid" />
                    <input type="submit" class="award_delete" value="Delete" />
                    <input type="button" class="cancel" value="Cancel" />
                </form>
            }
        }
        <div class="listusers" style="display: none;">
            <input type="button" class="cancel" value="Back" style="display: block;" />
            @{
                var users = DependencyResolver.UserLogic?.GetAll();
                IEnumerable<Entities.Award> awardsByUser;

                foreach (var user in users)
                {
                    <img class="user_img" src="@Images.GetImgSrc(root, user.UserGuid.ToString())">
                    <p>@(user.Name + " " + user.DateOfBirth.ToString(Entities.User.DateFormat))</p>

                awardsByUser = DependencyResolver.UserAwardLogic?.GetAwardsByUser(user);

                if (currentUser.Role != guest)
                {
                    foreach (var awardByUser in awardsByUser)
                    {
                            <div style="padding-left: 75px;">
                                <img class="award_img" src="@Images.GetImgSrc(root, awardByUser.AwardGuid.ToString())">
                                <p>@(awardByUser.Title)</p>
                            </div>
                        }
                    }
                }
            }
            <input type="button" class="cancel" value="Back" />
        </div>
        @{
            if (currentUser.Role == admin)
            {
                <div class="listawards" style="display: none;">
                    <input type="button" class="cancel" value="Back" style="display: block;" />
                    @{
                        var allAwards = DependencyResolver.AwardLogic?.GetAll();

                        foreach (var award in allAwards)
                        {
                            <img class="award_img" src="@Images.GetImgSrc(root, award.AwardGuid.ToString())">
                            <p>@award.Title</p>
                        }
                    }
                    <input type="button" class="cancel" value="Back" />
                </div>
                <form method="post" action="" class="join" style="display: none;">
                    <h3>Join</h3>
                    <div>
                        <h4>Choose user:</h4>
                        <p>
                            <select class="user_chosen_join">
                                @{
                                    users = DependencyResolver.UserLogic?.GetAll();

                                    foreach (var user in users)
                                    {
                                        <option selected>@(user.Name + " " + user.DateOfBirth.ToString(Entities.User.DateFormat))</option>
                                    }
                                }
                            </select>
                            <select class="user_chosen_join_guid" style="display: none;">
                                @{
                                    foreach (var user in users)
                                    {
                                        <option selected>@user.UserGuid.ToString()</option>
                                    }
                                }
                            </select>
                        </p>
                        <input type="text" class="user_guid_join" style="display: none;" name="userGuidJoin" />
                    </div>
                    <div>
                        <h4>Choose award:</h4>
                        <p>
                            <select class="award_chosen_join">
                                @{
                                    allAwards = DependencyResolver.AwardLogic?.GetAll();

                                    foreach (var award in allAwards)
                                    {
                                        <option selected>@award.Title</option>
                                    }
                                }
                            </select>
                            <select class="award_chosen_join_guid" style="display: none;">
                                @{
                                    foreach (var award in allAwards)
                                    {
                                        <option selected>@award.AwardGuid.ToString()</option>
                                    }
                                }
                            </select>
                        </p>
                        <input type="text" class="award_guid_join" style="display: none;" name="awardGuidJoin" />
                    </div>
                    <div>
                        <input type="submit" class="join_user_award" value="Join" />
                        <input type="button" class="cancel" value="Cancel" />
                    </div>
                </form>
                <form method="post" action="" class="user_edition" style="display: none;">
                    @{
                        users = DependencyResolver.UserLogic?.GetAll();

                        foreach (var user in users)
                        {
                            <div>
                                <input type="text" name="userNames" value=@user.Name />
                                <input type="date" name="userDates" value=@user.DateOfBirth.ToString("yyyy-MM-dd") />
                                <input type="text" name="userGuids" value=@user.UserGuid.ToString() style="display: none" />
                            </div>
                        }
                    }
                    <p>
                        <input type="submit" class="edit_user" value="Ok" />
                        <input type="button" class="cancel" value="Cancel" />
                    </p>
                </form>
                <form method="post" action="" class="award_edition" style="display: none;">
                    @{
                        var awards = DependencyResolver.AwardLogic?.GetAll();

                        foreach (var award in awards)
                        {
                            <div>
                                <input type="text" name="awardTitles" value=@award.Title>
                                <input type="text" name="awardGuids" style="display: none" value=@award.AwardGuid.ToString()>
                            </div>
                        }
                    }
                    <p>
                        <input type="submit" class="edit_award" value="Ok" />
                        <input type="button" class="cancel" value="Cancel" />
                    </p>
                </form>
                <form enctype="multipart/form-data" method="post" action="" class="user_image_upload" style="display: none;">
                    <h3>Upload image to user</h3>
                    <div>
                        <h4>Choose user:</h4>
                        <p>
                            <select class="user_chosen_image">
                                @{
                                    users = DependencyResolver.UserLogic?.GetAll();

                                    foreach (var user in users)
                                    {
                                        <option selected>@(user.Name + " " + user.DateOfBirth.ToString(Entities.User.DateFormat))</option>
                                    }
                                }
                            </select>
                            <select class="user_chosen_image_guid" style="display: none;">
                                @{
                                    foreach (var user in users)
                                    {
                                        <option selected>@user.UserGuid.ToString()</option>
                                    }
                                }
                            </select>
                        </p>
                        <input type="text" class="user_image_guid" style="display: none;" name="userImageGuid" />
                    </div>
                    <h4>Choose image:</h4>
                    <p class="alertbox"></p>
                    <p>
                        <input type="file" class="userImage" name="userImage" accept="image/*" value=@userImages>
                    </p>
                    <div style="padding-top: 20px;">
                        <input type="submit" class="upload_user_image" value="Ok" />
                        <input type="button" class="cancel" value="Cancel" />
                    </div>
                </form>
                <form enctype="multipart/form-data" method="post" action="" class="award_image_upload" style="display: none;">
                    <h3>Upload image to award</h3>
                    <div>
                        <h4>Choose award:</h4>
                        <p>
                            <select class="award_chosen_image">
                                @{
                                    awards = DependencyResolver.AwardLogic?.GetAll();

                                    foreach (var award in awards)
                                    {
                                        <option selected>@(award.Title)</option>
                                    }
                                }
                            </select>
                            <select class="award_chosen_image_guid" style="display: none;">
                                @{
                                    foreach (var award in awards)
                                    {
                                        <option selected>@award.AwardGuid.ToString()</option>
                                    }
                                }
                            </select>
                        </p>
                        <input type="text" class="award_image_guid" style="display: none;" name="awardImageGuid" />
                    </div>
                    <h4>Choose image:</h4>
                    <p class="alertbox"></p>
                    <p>
                        <input type="file" class="awardImage" name="awardImage" accept="image/*" value=@awardImages>
                    </p>
                    <div style="padding-top: 20px;">
                        <input type="submit" class="upload_award_image" value="Ok" />
                        <input type="button" class="cancel" value="Cancel" />
                    </div>
                </form>
            }
        }
    </div>
</body>
</html>